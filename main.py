# main.py (–≤–∞—à —Ç–µ–∫—É—â–∏–π main.py –±–µ–∑ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ –∏ –±–µ–∑ @app.on_event("startup") –∏ asyncio.create_task(start_bot()))
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import os
import random
import logging

logging.basicConfig(level=logging.INFO)

app = FastAPI()

# 1. –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (HTML, CSS, JS, Images)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ 'public' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
app.mount("/public", StaticFiles(directory="public"), name="public")

# –û—Ç–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã mini-app (index.html)
@app.get("/", response_class=HTMLResponse)
async def serve_webapp_index():
    return FileResponse(os.path.join("public", "index.html"))

# --- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ–∫–∞) ---
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!

class User(BaseModel): # –î–æ–±–∞–≤–∏–º BaseModel –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã pydantic
    user_id: int
    balance: int = 100
    inventory: list = [] # –ü—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–∫–∏–Ω–æ–≤

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –∏—Å—á–µ–∑–Ω–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
users = {}

# –ü—Ä–∏–º–µ—Ä —Å–∫–∏–Ω–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
SKINS = [
    {"name": 'AWP Asiimov', "image": 'awp_asiimov.png', "rarity": "rare", "price": 50},
    {"name": 'AK-47 Redline', "image": 'ak_redline.png', "rarity": "rare", "price": 40},
    {"name": 'M4A4 Howl', "image": 'm4a4_howl.png', "rarity": "legendary", "price": 200},
    {"name": 'Glock-18 Fade', "image": 'glock_fade.png', "rarity": "epic", "price": 80},
    {"name": 'Deagle Blaze', "image": 'deagle_blaze.png', "rarity": "uncommon", "price": 20},
    {"name": 'USP-S Printstream', "image": 'usp_printstream.png', "rarity": "rare", "price": 60},
    {"name": 'Karambit Doppler', "image": 'karambit_doppler.png', "rarity": "mythical", "price": 300},
]

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ (–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
RARITY_PROBABILITIES = {
    "uncommon": 0.4,
    "rare": 0.3,
    "epic": 0.15,
    "legendary": 0.1,
    "mythical": 0.05,
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def get_random_skin():
    rand_val = random.random()
    current_prob = 0
    for rarity, prob in RARITY_PROBABILITIES.items():
        current_prob += prob
        if rand_val <= current_prob:
            possible_skins = [s for s in SKINS if s["rarity"] == rarity]
            if possible_skins:
                return random.choice(possible_skins)
    # Fallback in case something goes wrong with probabilities
    return random.choice(SKINS)


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@app.get("/api/user/{user_id}", response_model=User)
async def get_user_info(user_id: int):
    if user_id not in users:
        users[user_id] = User(user_id=user_id) # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    return users[user_id]

# API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
@app.post("/api/open_case/{user_id}")
async def open_case(user_id: int):
    COST_PER_SPIN = 30
    if user_id not in users:
        raise HTTPException(status_code=404, detail="User not found")

    user = users[user_id]
    if user.balance < COST_PER_SPIN:
        raise HTTPException(status_code=400, detail="Insufficient balance")

    user.balance -= COST_PER_SPIN
    won_skin = get_random_skin()
    user.inventory.append(won_skin["name"]) # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å–∫–∏–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    logging.info(f"User {user_id} opened case. Won: {won_skin['name']}. New balance: {user.balance}")
    return {"status": "success", "won_skin": won_skin, "new_balance": user.balance}

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
@app.get("/api/skins")
async def get_all_skins():
    return {"skins": SKINS}


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if not WEB_APP_URL:
        await message.answer("–û—à–∏–±–∫–∞: WEB_APP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé≤ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É",
                    web_app=WebAppInfo(url=f"{WEB_APP_URL}/")
                )
            ]
        ]
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã:",
        reply_markup=markup
    )

async def start_bot():
    if TOKEN:
        logging.info("Deleting old webhooks...")
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook deleted. Starting bot polling...")
        await dp.start_polling(bot)
    else:
        logging.warning("BOT_TOKEN not set. Telegram bot will not start.")
# --- –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –±–æ—Ç–∞ ---

app = FastAPI()

app.mount("/public", StaticFiles(directory="public"), name="public")

@app.get("/", response_class=HTMLResponse)
async def serve_webapp_index():
    return FileResponse(os.path.join("public", "index.html"))

# ... (–í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ FastAPI, User, SKINS, API-endpoints) ...

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
class User(BaseModel): # –î–æ–±–∞–≤–∏–º BaseModel –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã pydantic
    user_id: int
    balance: int = 100
    inventory: list = [] # –ü—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–∫–∏–Ω–æ–≤

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –∏—Å—á–µ–∑–Ω–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
users = {}

# –ü—Ä–∏–º–µ—Ä —Å–∫–∏–Ω–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
SKINS = [
    {"name": 'AWP Asiimov', "image": 'awp_asiimov.png', "rarity": "rare", "price": 50},
    {"name": 'AK-47 Redline', "image": 'ak_redline.png', "rarity": "rare", "price": 40},
    {"name": 'M4A4 Howl', "image": 'm4a4_howl.png', "rarity": "legendary", "price": 200},
    {"name": 'Glock-18 Fade', "image": 'glock_fade.png', "rarity": "epic", "price": 80},
    {"name": 'Deagle Blaze', "image": 'deagle_blaze.png', "rarity": "uncommon", "price": 20},
    {"name": 'USP-S Printstream', "image": 'usp_printstream.png', "rarity": "rare", "price": 60},
    {"name": 'Karambit Doppler', "image": 'karambit_doppler.png', "rarity": "mythical", "price": 300},
]

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ (–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
RARITY_PROBABILITIES = {
    "uncommon": 0.4,
    "rare": 0.3,
    "epic": 0.15,
    "legendary": 0.1,
    "mythical": 0.05,
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def get_random_skin():
    rand_val = random.random()
    current_prob = 0
    for rarity, prob in RARITY_PROBABILITIES.items():
        current_prob += prob
        if rand_val <= current_prob:
            possible_skins = [s for s in SKINS if s["rarity"] == rarity]
            if possible_skins:
                return random.choice(possible_skins)
    # Fallback in case something goes wrong with probabilities
    return random.choice(SKINS)


@app.get("/api/user/{user_id}", response_model=User)
async def get_user_info(user_id: int):
    if user_id not in users:
        users[user_id] = User(user_id=user_id) # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    return users[user_id]

# API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
@app.post("/api/open_case/{user_id}")
async def open_case(user_id: int):
    COST_PER_SPIN = 30
    if user_id not in users:
        raise HTTPException(status_code=404, detail="User not found")

    user = users[user_id]
    if user.balance < COST_PER_SPIN:
        raise HTTPException(status_code=400, detail="Insufficient balance")

    user.balance -= COST_PER_SPIN
    won_skin = get_random_skin()
    user.inventory.append(won_skin["name"]) # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å–∫–∏–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    logging.info(f"User {user_id} opened case. Won: {won_skin['name']}. New balance: {user.balance}")
    return {"status": "success", "won_skin": won_skin, "new_balance": user.balance}

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
@app.get("/api/skins")
async def get_all_skins():
    return {"skins": SKINS}


# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(start_bot()) # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

if __name__ == "__main__":
    # Uvicorn –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º Pella.app
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
