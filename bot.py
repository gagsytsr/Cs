import os
import asyncio
import logging # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from fastapi import FastAPI
from fastapi.responses import FileResponse, HTMLResponse
import uvicorn
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    logger.error("BOT_TOKEN environment variable not set. Please set it on Render.")
    # –í production –ª—É—á—à–µ –ø–æ–¥–Ω—è—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–π—Ç–∏, –Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫
    # raise ValueError("BOT_TOKEN environment variable not set.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –û—Ç–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Web App
@app.get("/", response_class=HTMLResponse)
async def get_webapp():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not os.path.exists('index.html'):
            logger.error("index.html not found!")
            return HTMLResponse("<h1>Error: index.html not found on server.</h1>", status_code=404)
        return FileResponse('index.html')
    except Exception as e:
        logger.error(f"Error serving index.html: {e}")
        return HTMLResponse(f"<h1>Server Error: {e}</h1>", status_code=500)

# –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (css, js, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
@app.get("/assets/{file_path:path}")
async def get_assets(file_path: str):
    full_path = f'assets/{file_path}'
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not os.path.exists(full_path):
            logger.warning(f"File not found: {full_path}")
            return HTMLResponse(f"<h1>Error: File not found: {file_path}</h1>", status_code=404)
        return FileResponse(full_path)
    except Exception as e:
        logger.error(f"Error serving asset {file_path}: {e}")
        return HTMLResponse(f"<h1>Server Error serving asset: {e}</h1>", status_code=500)

# –û—Ç–¥–∞—á–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
@app.get("/{file_path:path}")
async def get_static_files(file_path: str):
    # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–µ–Ω, –µ—Å–ª–∏ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å
    #, –∫ –∫–∞–∫–∏–º —Ñ–∞–π–ª–∞–º –æ–Ω –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø. –î–ª—è Web App –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ /assets/
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ.
    if file_path in ['style.css', 'script.js']: # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏
        try:
            if not os.path.exists(file_path):
                logger.warning(f"File not found: {file_path}")
                return HTMLResponse(f"<h1>Error: File not found: {file_path}</h1>", status_code=404)
            return FileResponse(file_path)
        except Exception as e:
            logger.error(f"Error serving static file {file_path}: {e}")
            return HTMLResponse(f"<h1>Server Error serving static file: {e}</h1>", status_code=500)
    else:
        logger.warning(f"Attempted to access restricted file: {file_path}")
        return HTMLResponse("<h1>404 Not Found</h1>", status_code=404)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è aiogram 3.x
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    # !!! –í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ URL –ù–ê –†–ï–ê–õ–¨–ù–´–ô URL, –ö–û–¢–û–†–´–ô –í–´ –ü–û–õ–£–ß–ò–¢–ï –û–¢ RENDER !!!
    # –ü—Ä–∏–º–µ—Ä: "https://your-service-name.onrender.com"
    render_webapp_url = os.getenv('RENDER_WEBAPP_URL', "https://cs-1-870u.onrender.com") # –°–¥–µ–ª–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if render_webapp_url == "https://example.com":
        logger.warning("RENDER_WEBAPP_URL environment variable not set. Using placeholder URL.")

    # –°–æ–∑–¥–∞–Ω–∏–µ ReplyKeyboardMarkup —Å WebAppInfo
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(
                    text="üé≤ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É",
                    web_app=WebAppInfo(url=render_webapp_url)
                )
            ]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã üéÅ",
        reply_markup=keyboard
    )
    logger.info(f"Sent start message to user {message.from_user.id}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Uvicorn-—Å–µ—Ä–≤–µ—Ä –¥–ª—è FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    port = int(os.getenv('PORT', 8000))
    logger.info(f"Starting Uvicorn web server on port {port}")
    uvicorn.run(app, host="0.0.0.0", port=port, log_level="info")

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def main() -> None:
    logger.info("Starting bot and web server...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=start_web_server, daemon=True)
    web_thread.start()
    logger.info("Web server thread started.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ Long Polling
    try:
        await dp.start_polling(bot)
        logger.info("Bot polling started.")
    except Exception as e:
        logger.error(f"Error starting bot polling: {e}")

if __name__ == "__main__":
    asyncio.run(main())

