import asyncio
import logging
import os
from threading import Thread

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.client.default import DefaultBotProperties

# >>> –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI <<<
from fastapi import FastAPI
import uvicorn
# >>> –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ <<<

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
# >>> WEB_APP_URL —Ç–µ–ø–µ—Ä—å –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –∫–æ–¥–µ <<<
WEB_APP_URL = "https://cs-2.onrender.com"

if not TOKEN:
    logging.error("Telegram Bot Token (BOT_TOKEN) not found in environment variables.")
    exit(1)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–æ–¥ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ ---
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π WEB_APP_URL
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé≤ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É",
                    web_app=WebAppInfo(url=f"{WEB_APP_URL}/") # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-—Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—ç—à–∞
                )
            ]
        ]
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã:",
        reply_markup=markup
    )

# >>> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π FastAPI –¥–ª—è "–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã–º" <<<
web_app = FastAPI()

@web_app.get("/health")
async def health_check():
    return {"status": "ok", "message": "Bot is alive and listening."}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_fastapi_server():
    port = int(os.getenv('PORT', 8000))
    logging.info(f"Starting FastAPI health check server on port {port}")
    uvicorn.run(web_app, host="0.0.0.0", port=port)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ (—Ç–µ–ø–µ—Ä—å —Å FastAPI –≤ –ø–æ—Ç–æ–∫–µ) ---
async def main() -> None:
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
    logging.info("Deleting old webhooks...")
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook deleted. Starting bot polling...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_fastapi_server, daemon=True).start()
    logging.info(f"FastAPI health check server started on port {os.getenv('PORT', 8000)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Long Polling –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
