const roulette = document.getElementById('roulette');
const spinBtn = document.getElementById('spin-btn');
const resultText = document.getElementById('result-text');
const balanceText = document.getElementById('balance-text');
const userId = window.Telegram.WebApp.initDataUnsafe.user.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp API

let balance = 0; // –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å –±—ç–∫–µ–Ω–¥–∞
let skins = []; // –°–∫–∏–Ω—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å –±—ç–∫–µ–Ω–¥–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ UI
function updateBalance() {
    balanceText.innerText = `–ë–∞–ª–∞–Ω—Å: ${balance}‚≠ê`;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–∏–Ω–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
async function loadGameData() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–Ω—ã
        const skinsResponse = await fetch('/api/skins');
        const skinsData = await skinsResponse.json();
        skins = skinsData.skins; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await fetch(`/api/user/${userId}`);
        const userData = await userResponse.json();
        balance = userData.balance;
        updateBalance();
        createRouletteItems(); // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–Ω–æ–≤
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}


function createRouletteItems() {
    roulette.innerHTML = '';
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
    for (let i = 0; i < 40; i++) {
        const skin = skins[Math.floor(Math.random() * skins.length)];
        const div = document.createElement('div');
        div.className = 'item';
        div.innerHTML = `
            <img src="/public/assets/skins/${skin.image}" style="width:80px; height:80px; display:block; margin:10px auto;">
            <span style="font-size:12px; color:white;">${skin.name}</span>
        `;
        roulette.appendChild(div);
    }
}

async function spinRoulette() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    try {
        const response = await fetch(`/api/open_case/${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            // body: JSON.stringify({ cost: 30 }) // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
        });

        const data = await response.json();

        if (response.status === 400) {
            alert(data.detail); // "Insufficient balance"
            return;
        }
        if (!response.ok) {
            throw new Error(data.detail || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
        }

        balance = data.new_balance;
        updateBalance();
        resultText.innerText = '';

        createRouletteItems(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        roulette.style.transition = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞
        roulette.style.transform = `translateX(0px)`; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        roulette.offsetWidth;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–∫–∏–Ω –≤—ã–ø–∞–ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –Ω–∞ –Ω–µ–º
        const wonSkin = data.won_skin;
        const targetIndex = skins.findIndex(s => s.name === wonSkin.name); // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–∫–∏–Ω–∞

        // –î–≤–∏–≥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–ø–∞–≤—à–∏–π —Å–∫–∏–Ω –æ–∫–∞–∑–∞–ª—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ
        // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è,
        // –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.
        // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ —à–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Ç–æ—á–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ.
        const itemWidth = 140; // –®–∏—Ä–∏–Ω–∞ .item + margin, –ø—Ä–∏–º–µ—Ä–Ω–æ
        const offsetToCenter = roulette.offsetWidth / 2 - itemWidth / 2; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

        const desiredOffset = -(targetIndex * itemWidth) + offsetToCenter + (Math.random() * itemWidth - itemWidth / 2); // –°–º–µ—â–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π

        roulette.style.transition = 'transform 3s cubic-bezier(0.25, 0.1, 0.25, 1)'; // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        roulette.style.transform = `translateX(${desiredOffset}px)`; // –î–≤–∏–≥–∞–µ–º –∫ –Ω—É–∂–Ω–æ–º—É —Å–∫–∏–Ω—É

        setTimeout(() => {
            resultText.innerText = `üéâ –¢–µ–±–µ –≤—ã–ø–∞–ª–æ: ${wonSkin.name}`;
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }, 3000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä—É—á–µ–Ω–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

spinBtn.addEventListener('click', spinRoulette);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp API
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
        loadGameData();
    } else {
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ Telegram WebApp
        console.warn("Telegram WebApp API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º user_id.");
        // Test user_id for local development
        // You'll need to mock window.Telegram.WebApp.initDataUnsafe.user.id for local testing
        // For actual deployment, this will be provided by Telegram.
        // For now, let's hardcode a dummy user_id if not in Telegram environment
        if (!userId) {
            console.error("User ID not available. Mini-app might not function correctly outside Telegram.");
            // Example for local test: userId = 123;
        }
        loadGameData();
    }
});
